install.packages("tidyverse")
library(tidyverse)
print("bom dia")
library
install.packages("tidyverse")
library
library(tidyverse)
arquivo.texto <- read.table('datasets\emotion.txt', sep = '\t')
arquivo.texto <- read.table('datasets/emotion.txt', sep = '\t')
txt <- read.table('datasets/emotion.txt', sep = '\t')
drop(arquivo.texto)
txt <- read.table('datasets/emotion.txt', header=TRUE, sep = '\t')
rm(arquivo.texto)
csv <- read.csv('datasets/TomatoFirst.csv')
write.csv(txt, file="datasets/emotion.csv")
install.packages("readxl")
library(readxl)
excel <- readxl::read_excel('datasets/dados_bussab_m.xlsx')
head(exel)
head(excel)
?readxl::read_excel
html <- read_html("https://en.wikipedia.org/wiki/World_population")
html <- rvest::read_html("https://en.wikipedia.org/wiki/World_population")
html1 <- html %>% rvest::html_nodes("table") %>% html_text()
html1 <- html %>% rvest::html_nodes("table")
headlines <- titulos[1:16]
library(rvest)
#Checando se o site permite extracao dos dados
paths_allowed(paths="https://en.wikipedia.org/wiki/World_population")
library(robotstxt)
install.packages("rvest")
library(rvest)
install.packages("robotstxt")
library(robotstxt)
#Checando se o site permite extracao dos dados
paths_allowed(paths="https://en.wikipedia.org/wiki/World_population")
#Lendo os dados e identificando tabelas
populacao.mundial.web <- rvest::read_html("https://en.wikipedia.org/wiki/World_population")
lpop <- populacao.mundial.web %>% rvest::html_nodes("table") %>% html_table()
View(lpop)
pop.mundial <- lpop[[4]]
View(pop.mundial)
g1.agora <- read_html("https://www.globo.com/")
titulos <- g1.agora %>% rvest::html_elements("h2") %>% html_text()
View(g1.agora)
headlines <- titulos[1:16]
minhaFuncao <- function(param1, param2, param3)
{
#corpo da função
vFuncao <- (param1 + param2) - param3
#saida da função
return(vFuncao)
}
minhaFuncao(param1 = 10,param2 = 3,param3 = 2)
minhaFuncao(10,3,2)
#testando purr
mm <- matrix(c(1, 4, 10, 5, 12, 3), nrow = 2, ncol = 3)
mm
apply(mm, 1, mean)
### operador pipe %>%
c(100, 35, 67, 1, 9, 2, 15)
### operador pipe %>%
c(100, 35, 67, 1, 9, 2, 15)%>%sort()
### operador pipe %>%
vPipe <- c(100, 35, 67, 1, 9, 2, 15)
vPipe%>%sort()
median(vPipe)
vPipeSort <- vPipe%>%sort()
#número do meio
vPipeSort[round(length(vPipeSort)/2)]
vPipeSort[round(length(vPipeSort)/2)]
#número do meio
vPipe[round(length(vPipeSort)/2)]
vPipe[round(length(vPipe)/2)]
#média entre os 2 elementos do meio
mean(vPipeSort[round(length(vPipeSort)/2)]:vPipeSort[round(length(vPipeSort)/2)]+1)
vPipeSort[round(length(vPipeSort)/2)]
#média entre os 2 elementos do meio
mean(vPipeSort[round(length(vPipeSort)/2)]:vPipeSort[round(length(vPipeSort)/2+1)])
vPipeSort[round(length(vPipeSort)/2+1)
length(vPipeSort)/2+1
(length(vPipeSort)/2)+1
vPipeSort[round((length(vPipeSort)/2)+1)]
vPipeSort[(length(vPipeSort)/2)+1]
vPipeSort[(length(vPipeSort)/2)+1]
vPipeSort[((length(vPipeSort)/2)+1)]
((length(vPipeSort)/2)+1)
(length(vPipeSort)/2)
((length(vPipeSort)/2)+1)
mean(vPipeSort[round(length(vPipeSort)/2)]:((length(vPipeSort)/2)+1))
#média entre os 2 elementos do meio
mean(vPipeSort[round(length(vPipeSort)/2):((length(vPipeSort)/2)+1)])
vPipeSort[round(length(vPipeSort)/2):((length(vPipeSort)/2)+1)]
((length(vPipeSort)/2)+1)
round(length(vPipeSort)/2)
(round(length(vPipeSort)/2)+1)
vPipeSort[round(length(vPipeSort)/2):(round(length(vPipeSort)/2)+1)]
#média entre os 2 elementos do meio
mean(vPipeSort[round(length(vPipeSort)/2):((length(vPipeSort)/2)+1)])
med <- function(vPipeSort)
{
if(length(vPipeSort)%%2 == 0)
{
#média entre os 2 elementos do meio
return(mean(vPipeSort[round(length(vPipeSort)/2):((length(vPipeSort)/2)+1)]))
} else
{
#número do meio
return(vPipeSort[round(length(vPipeSort)/2)])
}
}
med
vPipe %>% sort() %>% med()
med(vPipe)
med(vPipe)
med_ord <- function(vPipeSort)
{
if(length(vPipeSort)%%2 == 0)
{
#média entre os 2 elementos do meio
return(mean(vPipeSort[round(length(vPipeSort)/2):((length(vPipeSort)/2)+1)]))
} else
{
#número do meio
return(vPipeSort[round(length(vPipeSort)/2)])
}
}
vPipe %>% sort() %>% med_ord()
### operador select
mm
mm[,2]
mm%>%dplyr::select(2)
mm
mm[which(mm$2 == 10),]
mm[which(mm[,2] == 10),]
mm%>%dplyr::filter(2 == 10)
df <- as.data.frame(mm)
df[,2]
df%>%dplyr::select(2)
df[which(df[,2] == 10),]
df%>%dplyr::filter(2 == 10)
df%>%dplyr::filter(2 == "10")
colnames(df) <- c("A", "B", "C")
df[,2]
df%>%dplyr::select("c")
install.packages(tidyverse)
install.packages('tidyverse')
install.packages('dlookr')
install.packages("summarytools")
installed.packages("readxl")
install.packages("readxl")
install.packages('knitr')
library(tidyverse)
library(dlookr)
library(summarytools)
library(readxl)
library(knitr)
library(readxl)
library(readxl)
library(knitr)
library(summarytools)
salarios <- readxl::read_excel("datasets/dados_bussab_m.xlsx")
kable(head(salarios))
```
salarios %>%> dlookr::diagnose()%>%>kable()
salarios %>%> dlookr::diagnose()%>%kable()
salarios %>%> dlookr::diagnose()%>%kable()
salarios %>% dlookr::diagnose()%>%kable()
salarios %>% dlookr::diagnose()
salarios %>% dlookr::diagnose()%>%kable()
salarios %>% dplyr::select(region) %>% summarytools::freq(., style='rmarkdown')
salarios %>% dplyr::select(regiao) %>% summarytools::freq(., style='rmarkdown')
salarios %>% dplyr::select(regiao) %>% summarytools::freq(., style='rmarkdown', order="freq")
salarios %>% dplyr::select(regiao) %>% summarytools::freq(., style='rmarkdown', order="freq")
salarios %>% dplyr::select(n_filhos) %>% summarytools::freq(., style='rmarkdown', order="freq")
salarios %>% dply::select(salario) %>% summarytools::descr(., style='rmarkdown')
salarios %>% dplyr::select(salario) %>% summarytools::descr(., style='rmarkdown')
salarios %>% dplyr::select(salario, n_filhos) %>% summarytools::descr(., style='rmarkdown')
salarios %>% dplyr::select(salario, n_filhos, regiao) %>% summarytools::descr(., style='rmarkdown')
View(salarios)
salarios %>% dplyr::select(salario, n_filhos, idade) %>% summarytools::descr(., style='rmarkdown')
salarios %>% dplyr::select(salario, n_filhos, idade_anos) %>% summarytools::descr(., style='rmarkdown')
lapply(salarios, function(var), class(x))
lapply(salarios, function(var) class(x))
salarios %>% dfSummary() %>% view()
lapply(salarios, function(var))
lapply(salarios, function(var) table(var))
